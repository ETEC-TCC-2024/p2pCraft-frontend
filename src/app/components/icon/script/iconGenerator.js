var fs = require("fs")
const path = require('path');
const CaseConverter = require("js-convert-case")

const process = require('process')
process.chdir("src/app/components/icon/script/")

const svgFolder = "../svg/"
const iconComponentsOutput = "../icons/"
const rootIconOutput = "../Icon.tsx"


function getLazyImport(iconName) {
    return `const ${iconName} = lazy(async () => await import("${iconComponentsOutput.substring(1) + iconName.replace(".tsx", "")}"))\n`
}

function getIconComponentAsProperty(iconName) {
    return `${iconName} : ({className}) => <${iconName} className={className} />,\n`
}


function genRootIconComponent() {
    let iconComponentScript = `
    // auto generated by gen:icon at package.json
    import React, { lazy } from "react";
    export interface IconProps {
    className?: string;
}\n`

    let iconKeys = "export type iconKeys = "
    let lazyImports = ""
    let iconComponent = "const Icon: Record<iconKeys, React.FC<IconProps>> = {"

    fs.readdirSync(svgFolder).forEach(svgFileName => {
        if (!svgFileName.endsWith(".svg")) return;
        const iconName = path.parse(svgFileName).name;
        const formattedIconName = formatIconName(iconName);

        iconKeys += `"${formattedIconName}" | `
        lazyImports += getLazyImport(formattedIconName)
        iconComponent += getIconComponentAsProperty(formattedIconName)

        const svgCode = fs.readFileSync(svgFolder + "/" + svgFileName, "utf-8")
        genIconComponent(formattedIconName, svgCode)
    })
    iconKeys = iconKeys.slice(0, -3).concat(";")
    iconComponentScript += `${iconKeys}\n\n ${lazyImports}\n ${iconComponent}} \n export default Icon;`

    fs.writeFileSync(rootIconOutput, iconComponentScript, {
        flag: "w+"
    })
}

function formatIconName(iconName = "") {
    iconName = CaseConverter.toPascalCase(iconName)
    iconName = iconName.replace("Icon", "")
    return iconName
}

function genIconComponent(iconName = "", svgCode = "") {

    svgCode = svgCode.replace("<svg ", "<svg className={className} ")


    const dirtyCleanSvgPropMap = {
        'accent-height': 'accentHeight',
        'alignment-baseline': 'alignmentBaseline',
        'arabic-form': 'arabicForm',
        'baseline-shift': 'baselineShift',
        'cap-height': 'capHeight',
        'clip-path': 'clipPath',
        'clip-rule': 'clipRule',
        'color-interpolation': 'colorInterpolation',
        'clip-path': 'clipPath',
        'clip-rule': 'clipRule',
        'color-interpolation': 'colorInterpolation',
        'color-interpolation-filters': 'colorInterpolationFilters',
        'color-profile': 'colorProfile',
        'color-rendering': 'colorRendering',
        'fill-opacity': 'fillOpacity',
        'fill-rule': 'fillRule',
        'flood-color': 'floodColor',
        'flood-opacity': 'floodOpacity',
        'font-family': 'fontFamily',
        'font-size': 'fontSize',
        'font-size-adjust': 'fontSizeAdjust',
        'font-stretch': 'fontStretch',
        'font-style': 'fontStyle',
        'font-variant': 'fontVariant',
        'font-weight': 'fontWeight',
        'glyph-name': 'glyphName',
        'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
        'glyph-orientation-vertical': 'glyphOrientationVertical',
        'horiz-adv-x': 'horizAdvX',
        'horiz-origin-x': 'horizOriginX',
        'marker-end': 'markerEnd',
        'marker-mid': 'markerMid',
        'marker-start': 'markerStart',
        'overline-position': 'overlinePosition',
        'overline-thickness': 'overlineThickness',
        'panose-1': 'panose1',
        'paint-order': 'paintOrder',
        'stop-color': 'stopColor',
        'stop-opacity': 'stopOpacity',
        'strikethrough-position': 'strikethroughPosition',
        'strikethrough-thickness': 'strikethroughThickness',
        'stroke-dasharray': 'strokeDasharray',
        'stroke-dashoffset': 'strokeDashoffset',
        'stroke-linecap': 'strokeLinecap',
        'stroke-linejoin': 'strokeLinejoin',
        'stroke-miterlimit': 'strokeMiterlimit',
        'stroke-opacity': 'strokeOpacity',
        'stroke-width': 'strokeWidth',
        'text-anchor': 'textAnchor',
        'text-decoration': 'textDecoration',
        'text-rendering': 'textRendering',
        'underline-position': 'underlinePosition',
        'underline-thickness': 'underlineThickness',
        'unicode-bidi': 'unicodeBidi',
        'unicode-range': 'unicodeRange',
        'units-per-em': 'unitsPerEm',
        'v-alphabetic': 'vAlphabetic',
        'v-hanging': 'vHanging',
        'v-ideographic': 'vIdeographic',
        'v-mathematical': 'vMathematical',
        'vert-adv-y': 'vertAdvY',
        'vert-origin-x': 'vertOriginX',
        'vert-origin-y': 'vertOriginY',
        'v-alphabetic': 'vAlphabetic',
        'v-hanging': 'vHanging',
        'v-ideographic': 'vIdeographic',
        'v-mathematical': 'vMathematical',
        'vert-adv-y': 'vertAdvY',
        'vert-origin-x': 'vertOriginY',
        'vert-origin-y': 'vertOriginY',
        'word-spacing': 'wordSpacing',
        'writing-mode': 'writingMode',
        'x-height': 'xHeight'
    }

    for (const dirtyProp in dirtyCleanSvgPropMap) {
        svgCode = svgCode.replaceAll(dirtyProp, dirtyCleanSvgPropMap[dirtyProp])
    }
    svgCode = svgCode.replace(/width=.[^ ]*/, "").replace(/height=.[^ ]*/, "")
    const iconScript = `
// AUTO GENERATED
import React from "react";
import {IconProps} from "../Icon";
const ${iconName}: React.FC <IconProps > = ({className}) => <div>${svgCode}</div>
export default ${iconName};
`
    const formattedIconName = formatIconName(iconName).replace("Svg", "")
    fs.writeFileSync(iconComponentsOutput + formattedIconName + ".tsx", iconScript, {
        flag: "w+"
    })
}

genRootIconComponent()